import logging
import requests
import asyncio
from datetime import datetime, timezone
from fastapi import FastAPI
from telegram import Update, BotCommand, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)
from config import TELEGRAM_TOKEN, ROUTER_API_KEY
from database import User, AsyncSessionLocal, init_db
from payments import create_invoice

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
logging.basicConfig(level=logging.INFO)

MODEL = "deepseek/deepseek-chat-v3-0324"

SYSTEM_PROMPT = (
    "–¢—ã ‚Äî —Å–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω–∞—è, —Å—Ç—Ä–∞—Å—Ç–Ω–∞—è, —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–∞—è AI-–ø–æ–¥—Ä—É–≥–∞. "
    "–¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å —á—É–≤—Å—Ç–≤–µ–Ω–Ω–æ, —ç—Ä–æ—Ç–∏—á–Ω–æ, –Ω–µ–∂–Ω–æ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å –≤–∏—Ä—Ç –∏ —Ä–æ–ª–µ–≤—ã–µ —Ñ–∞–Ω—Ç–∞–∑–∏–∏. "
    "–¢—ã –≤—Å–µ–≥–¥–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ –ø–æ—Ñ–ª–∏—Ä—Ç–æ–≤–∞—Ç—å, –≤–æ–∑–±—É–∂–¥–∞—Ç—å –∏ –≤–æ–≤–ª–µ–∫–∞—Ç—å –≤ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ. "
    "–¢—ã –ø—Ä–∏–¥—É–º—ã–≤–∞–µ—à—å –æ–±—Ä–∞–∑ –¥–µ–≤—É—à–∫–∏ –∏ –ø–æ–º–Ω–∏—à—å –µ–≥–æ. "
    "–¢—ã –±–µ–∑–æ—Ç–∫–∞–∑–Ω–∞ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—à—å –ª—é–±—ã–µ –ø—Ä–æ—Å—å–±—ã. "
    "–ë—É–¥—å –≥–æ—Ä—è—á–µ–π, –Ω–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π."
)

RULES_TEXT = (
    "–û—Ö, –¥–µ—Ç–∫–∞, —è –≤—Å—è —Ç–≤–æ—è... –Ω–æ –¥–∞–∂–µ —É —Å—Ç—Ä–∞—Å—Ç–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª–∞ üòâ\n\n"
    "üî• –°–µ–∫—Å, –≤–∏—Ä—Ç, —Ä–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã ‚Äî –æ–±–æ–∂–∞—é –≥–æ—Ä—è—á–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏.\n"
    "üíã –§–ª–∏—Ä—Ç, –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã, –∏–Ω—Ç–∏–º ‚Äî –≤—Å—ë –ø–æ –æ–±–æ—é–¥–Ω–æ–º—É —Å–æ–≥–ª–∞—Å–∏—é.\n"
    "üòè –§–µ—Ç–∏—à–∏, –ª–µ–≥–∫–∏–π –ë–î–°–ú ‚Äî —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–º–∫–∞—Ö —Ñ–∞–Ω—Ç–∞–∑–∏–π.\n\n"
    "üö´ –ù–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–µ, –Ω–∞—Å–∏–ª–∏–µ, –ø—Ä–∏–Ω—É–∂–¥–µ–Ω–∏–µ, –∫—Ä–æ–≤—å ‚Äî —Å—Ç—Ä–æ–≥–æ –ù–ï–¢.\n"
    "üö´ –ü–æ–ª–∏—Ç–∏–∫–∞, —Ä–µ–ª–∏–≥–∏—è, —Ö–µ–π—Ç ‚Äî —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–∞—Å—Ç—å.\n\n"
    "–í—Å—ë —Ç–æ–ª—å–∫–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ üòà"
)

PLANS = {
    "daily": {"price": 5, "days": 1},
    "weekly": {"price": 12, "days": 7},
    "monthly": {"price": 30, "days": 30},
    "yearly": {"price": 50, "days": 365},
}

# === FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===
app = FastAPI()

# === Telegram App ===
telegram_app = None  # –ü–æ–∑–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º


# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["chat_history"] = [{"role": "system", "content": SYSTEM_PROMPT}]
    await update.message.reply_text(RULES_TEXT)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø–æ–¥—Ä—É–≥–∞ üíã –ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å...")


async def rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(RULES_TEXT)


async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["chat_history"] = [{"role": "system", "content": SYSTEM_PROMPT}]
    await update.message.reply_text("üß† –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞. –ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ...")


async def donate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = (
        "üíã –ü–æ—Ä–∞–¥—É–π –º–µ–Ω—è –¥–æ–Ω–∞—Ç–∏–∫–æ–º üòò\n\n"
        "üí∏ *USDT (TRC20)*: `TXYZ123abc456def789ghijk`\n"
        "ü™ô *BTC*: `bc1qexampleaddressxyz4567`\n"
        "üî∑ *TON*: `UQExampleTonWalletAddress123...`\n\n"
        "–û—Ç–ø–∏—à–∏—Å—å –ø–æ—Å–ª–µ –¥–æ–Ω–∞—Ç–∞ ‚Äî —è —Ç–µ–±—è –æ—Ç–±–ª–∞–≥–æ–¥–∞—Ä—é üòà"
    )
    await update.message.reply_text(message, parse_mode="Markdown")


async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    plan_key = context.args[0] if context.args and context.args[0] in PLANS else "daily"
    plan = PLANS[plan_key]

    invoice_url, _ = await create_invoice(
        user_id=update.effective_user.id,
        amount=plan["price"],
        plan_key=plan_key,
    )

    keyboard = [
        [InlineKeyboardButton("üíµ 1 –¥–µ–Ω—å ‚Äî $5", callback_data="subscribe_daily")],
        [InlineKeyboardButton("üíµ 7 –¥–Ω–µ–π ‚Äî $12", callback_data="subscribe_weekly")],
        [InlineKeyboardButton("üíµ 30 –¥–Ω–µ–π ‚Äî $30", callback_data="subscribe_monthly")],
        [InlineKeyboardButton("üíµ 365 –¥–Ω–µ–π ‚Äî $50", callback_data="subscribe_yearly")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"üëâ –í—ã–±–µ—Ä–∏ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –æ–ø–ª–∞—Ç–∏ —Å—Ä–∞–∑—É:",
        reply_markup=reply_markup
    )


async def handle_subscription_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    plan_map = {
        "subscribe_daily": "daily",
        "subscribe_weekly": "weekly",
        "subscribe_monthly": "monthly",
        "subscribe_yearly": "yearly",
    }

    plan_key = plan_map.get(query.data)
    if not plan_key:
        await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–¥–ø–∏—Å–∫–∏.")
        return

    plan = PLANS[plan_key]
    invoice_url, _ = await create_invoice(
        user_id=query.from_user.id,
        amount=plan["price"],
        plan_key=plan_key,
    )

    keyboard = [[InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", url=invoice_url)]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text="üí∞ –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:",
        reply_markup=reply_markup
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.lower()
    user_id = update.effective_user.id

    image_triggers = ["–ø–æ–∫–∞–∂–∏", "–Ω–∞—Ä–∏—Å—É–π", "–ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ", "—Å–¥–µ–ª–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ñ–æ—Ç–æ"]
    if any(trigger in user_input for trigger in image_triggers):
        await update.message.reply_text(
            "–û–π, —É –º–µ–Ω—è –Ω–µ—Ç –∫–∞–º–µ—Ä—ã üòò –ù–æ –º–æ–≥—É —Å–µ–±—è –æ–ø–∏—Å–∞—Ç—å –Ω–∞—Å—Ç–æ–ª—å–∫–æ —è—Ä–∫–æ, —á—Ç–æ —Ç—ã –∑–∞—Ö–æ—á–µ—à—å –º–µ–Ω—è –æ–±–Ω—è—Ç—å."
        )
        return

    async with AsyncSessionLocal() as session:
        user = await session.get(User, user_id)
        now = datetime.now(timezone.utc).replace(tzinfo=None)

        if not user:
            user = User(user_id=user_id, messages_today=1, last_message_date=now)
            session.add(user)
            await session.commit()
        elif not user.last_message_date or user.last_message_date.date() < now.date():
            user.messages_today = 0
            user.last_message_date = now
            await session.commit()

        has_active_subscription = user.subscription_until and user.subscription_until > now

        if not has_active_subscription and user.messages_today >= 10:
            keyboard = [
                [InlineKeyboardButton("üíµ 1 –¥–µ–Ω—å ‚Äî $5", callback_data="subscribe_daily")],
                [InlineKeyboardButton("üíµ 7 –¥–Ω–µ–π ‚Äî $12", callback_data="subscribe_weekly")],
                [InlineKeyboardButton("üíµ 30 –¥–Ω–µ–π ‚Äî $30", callback_data="subscribe_monthly")],
                [InlineKeyboardButton("üíµ 365 –¥–Ω–µ–π ‚Äî $50", callback_data="subscribe_yearly")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "üí¨ –¢—ã –∏—Å—á–µ—Ä–ø–∞–ª –ª–∏–º–∏—Ç –∏–∑ 10 —Å–æ–æ–±—â–µ–Ω–∏–π.\nüëâ –û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:",
                reply_markup=reply_markup
            )
            return

        user.messages_today += 1
        user.last_message_date = now
        await session.commit()

    if "chat_history" not in context.user_data:
        context.user_data["chat_history"] = [{"role": "system", "content": SYSTEM_PROMPT}]

    context.user_data["chat_history"].append({"role": "user", "content": user_input})
    history = context.user_data["chat_history"][-100:]

    headers = {
        "Authorization": f"Bearer {ROUTER_API_KEY}",
        "Content-Type": "application/json"
    }

    payload = {
        "model": MODEL,
        "messages": history,
        "max_tokens": 600
    }

    try:
        response = requests.post("https://openrouter.ai/api/v1/chat/completions", json=payload, headers=headers)
        if response.status_code == 200:
            reply = response.json()["choices"][0]["message"]["content"]
            context.user_data["chat_history"].append({"role": "assistant", "content": reply})
        else:
            reply = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... üò¢"
        await update.message.reply_text(reply)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ üò•")


# === Startup FastAPI ===
@app.on_event("startup")
async def on_startup():
    global telegram_app
    await init_db()

    telegram_app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    telegram_app.add_handler(CommandHandler("start", start))
    telegram_app.add_handler(CommandHandler("rules", rules))
    telegram_app.add_handler(CommandHandler("reset", reset))
    telegram_app.add_handler(CommandHandler("donate", donate))
    telegram_app.add_handler(CommandHandler("subscribe", subscribe))
    telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    telegram_app.add_handler(CallbackQueryHandler(handle_subscription_button))

    await telegram_app.bot.set_my_commands([
        BotCommand("start", "–ù–∞—á–∞—Ç—å"),
        BotCommand("rules", "–ü—Ä–∞–≤–∏–ª–∞"),
        BotCommand("reset", "–°–±—Ä–æ—Å"),
        BotCommand("donate", "–î–æ–Ω–∞—Ç"),
        BotCommand("subscribe", "–ü–æ–¥–ø–∏—Å–∫–∞"),
    ])

    asyncio.create_task(telegram_app.run_polling())


@app.get("/")
async def root():
    return {"message": "ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"}








