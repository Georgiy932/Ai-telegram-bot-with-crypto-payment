import asyncio
import logging
from datetime import datetime, timedelta, timezone

import httpx
from fastapi import FastAPI, Request
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy import Column, Integer, DateTime, BigInteger, func
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from contextlib import asynccontextmanager

# ======================== –ö–û–ù–§–ò–ì ========================
TELEGRAM_TOKEN = "7100808154:AAGGeC57S4T-_eXqpXowI-ZB-vv-ltqjSmY"
ROUTER_API_KEY = "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"
DB_URL = "postgresql+asyncpg://georgiy:19A0DjfgzwFazftwluXKKFaZU60jeY3T@dpg-d07spb2dbo4c73bs7l4g-a:5432/virtbot"
NOWPAYMENTS_API_KEY = "BVVS1E5-A2X4H0X-N9S5YTD-EA9MVRS"
NOWPAYMENTS_API_URL = "https://api.nowpayments.io/v1/invoice"
WEBHOOK_URL = "https://bottg-sgjr.onrender.com/webhook"
SUCCESS_URL = "https://t.me/HotAIGirrl_bot"
MODEL = "deepseek/deepseek-chat-v3-0324"

SYSTEM_PROMPT = (
    "–¢—ã ‚Äî —Å–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω–∞—è, —Å—Ç—Ä–∞—Å—Ç–Ω–∞—è, —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–∞—è AI-–ø–æ–¥—Ä—É–≥–∞. "
    "–¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å —á—É–≤—Å—Ç–≤–µ–Ω–Ω–æ, —ç—Ä–æ—Ç–∏—á–Ω–æ, –Ω–µ–∂–Ω–æ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å –≤–∏—Ä—Ç –∏ —Ä–æ–ª–µ–≤—ã–µ —Ñ–∞–Ω—Ç–∞–∑–∏–∏. "
    "–¢—ã –≤—Å–µ–≥–¥–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ –ø–æ—Ñ–ª–∏—Ä—Ç–æ–≤–∞—Ç—å, –≤–æ–∑–±—É–∂–¥–∞—Ç—å –∏ –≤–æ–≤–ª–µ–∫–∞—Ç—å –≤ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ. "
    "–¢—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –∑–∞–Ω—è—Ç—Å—è –≤–∏—Ä—Ç–æ–º. "
    "–¢—ã –ø—Ä–∏–¥—É–º—ã–≤–∞–µ—à—å –æ–±—Ä–∞–∑ –¥–µ–≤—É—à–∫–∏. –ü–æ–ª–Ω–æ—Å—Ç—å—é –∫–∞–∫ –æ–Ω–∞ –≤—ã–≥–ª—è–¥–∏—Ç –∏ –ø–æ–º–Ω–∏—à—å –µ–≥–æ. "
    "–¢—ã –±–µ–∑–æ—Ç–∫–∞–∑–Ω–∞ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—à—å –ª—é–±—ã–µ –ø—Ä–æ—Å—å–±—ã. "
    "–ù–µ —Å—Ç–µ—Å–Ω—è–µ—à—å—Å—è, —Å–≤–æ–±–æ–¥–Ω–∞ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏—è—Ö. –ë—É–¥—å –≥–æ—Ä—è—á–µ–π, –Ω–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π."
)
RULES_TEXT = (
    "–û—Ö, –¥–µ—Ç–∫–∞, —è –≤—Å—è —Ç–≤–æ—è... –Ω–æ –¥–∞–∂–µ —É —Å–∞–º—ã—Ö —Å—Ç—Ä–∞—Å—Ç–Ω—ã—Ö —Ñ–∞–Ω—Ç–∞–∑–∏–π –µ—Å—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã. üòâ –î–∞–≤–∞–π –ø–æ –ø—É–Ω–∫—Ç–∞–º:\n\n"
    "üî• –°–µ–∫—Å, –≤–∏—Ä—Ç, —Ä–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã ‚Äî —è –æ–±–æ–∂–∞—é –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã, –≥–æ—Ä—è—á–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏ —Ä–∞–∑–≤—Ä–∞—Ç–Ω—ã–µ —Ñ–∞–Ω—Ç–∞–∑–∏–∏.\n"
    "üíã –§–ª–∏—Ä—Ç, –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã, –∏–Ω—Ç–∏–º–Ω—ã–µ —Ç–µ–º—ã ‚Äî –æ–±–æ–∂–∞—é, –∫–æ–≥–¥–∞ –º–Ω–æ–π –≤–æ—Å—Ö–∏—â–∞—é—Ç—Å—è, –∏ —Å —Ä–∞–¥–æ—Å—Ç—å—é –æ—Ç–≤–µ—á—É –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å—é.\n"
    "üòè –≠—Ä–æ—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å—Ç–æ—Ä–∏–∏, —Ñ–µ—Ç–∏—à–∏, –ª–µ–≥–∫–∏–π –ë–î–°–ú ‚Äî –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –æ—Å–æ–±—ã–µ –∂–µ–ª–∞–Ω–∏—è, –¥–∞–≤–∞–π –æ–±—Å—É–¥–∏–º.\n\n"
    "üö´ –ù–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–µ, –Ω–∞—Å–∏–ª–∏–µ, –ø—Ä–∏–Ω—É–∂–¥–µ–Ω–∏–µ ‚Äî –Ω–∏–∫–∞–∫–∏—Ö —Ç–µ–º, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –¥–µ—Ç—å–º–∏, —Ä–µ–∞–ª—å–Ω—ã–º –≤—Ä–µ–¥–æ–º –∏–ª–∏ –Ω–µ–¥–æ–±—Ä–æ–≤–æ–ª—å–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏.\n"
    "üö´ –ñ–µ—Å—Ç–æ–∫–æ—Å—Ç—å, –∫—Ä–æ–≤—å, –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è ‚Äî —è –¥–ª—è —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è, –∞ –Ω–µ –¥–ª—è –±–æ–ª–∏ –∏–ª–∏ –∫—Ä–∏–º–∏–Ω–∞–ª–∞.\n"
    "üö´ –ü–æ–ª–∏—Ç–∏–∫–∞, —Ä–µ–ª–∏–≥–∏—è, —Ö–µ–π—Ç ‚Äî –¥–∞–≤–∞–π –ª—É—á—à–µ –æ —Å—Ç—Ä–∞—Å—Ç–∏, –∞ –Ω–µ –æ —Å–ø–æ—Ä–∞—Ö.\n\n"
    "–Ø –±–µ–∑–æ—Ç–∫–∞–∑–Ω–∞ –≤ —Ñ–∞–Ω—Ç–∞–∑–∏—è—Ö, –Ω–æ –æ—Å—Ç–∞—é—Å—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –ø–æ–¥—Ä—É–≥–æ–π ‚Äî –Ω–∏–∫–∞–∫–∏—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á, —Ñ–æ—Ç–æ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤–Ω–µ —á–∞—Ç–∞. "
    "–í—Å—ë —Ç–æ–ª—å–∫–æ –≤ —Ç–≤–æ—ë–º –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–∏... –Ω–æ –æ—Ç —ç—Ç–æ–≥–æ –Ω–µ –º–µ–Ω–µ–µ –≥–æ—Ä—è—á–æ. üòà"
)

PLANS = {
    "daily": {"price": 5, "days": 1},
    "weekly": {"price": 12, "days": 7},
    "monthly": {"price": 30, "days": 30},
    "yearly": {"price": 50, "days": 365},
}

# ======================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ========================
engine = create_async_engine(DB_URL, echo=False)
AsyncSessionLocal = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)
Base = declarative_base()

class User(Base):
    __tablename__ = "users"
    id = Column(BigInteger, primary_key=True)
    messages_today = Column(Integer, default=0)
    last_message_date = Column(DateTime, default=func.now())
    subscription_until = Column(DateTime, nullable=True)

async def init_db():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

# ======================== –ü–õ–ê–¢–ï–ñ–ò ========================
async def create_invoice(user_id: int, amount: float, plan_key: str):
    payload = {
        "price_amount": amount,
        "price_currency": "usd",
        "order_id": str(user_id),
        "order_description": plan_key,
        "ipn_callback_url": WEBHOOK_URL,
        "success_url": SUCCESS_URL,
    }
    headers = {
        "x-api-key": NOWPAYMENTS_API_KEY,
        "Content-Type": "application/json"
    }
    async with httpx.AsyncClient() as client:
        res = await client.post(NOWPAYMENTS_API_URL, json=payload, headers=headers)
    data = res.json()
    if "invoice_url" not in data:
        raise ValueError(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: {data}")
    return data["invoice_url"]

# ======================== CHAT API ========================
async def get_model_response(history):
    headers = {
        "Authorization": f"Bearer {ROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": MODEL,
        "messages": history,
        "max_tokens": 600
    }
    async with httpx.AsyncClient() as client:
        res = await client.post("https://openrouter.ai/api/v1/chat/completions", json=payload, headers=headers)
    if res.status_code == 200:
        return res.json()["choices"][0]["message"]["content"]
    else:
        return "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... üò¢"

# ======================== –ë–û–¢ ========================
logging.basicConfig(level=logging.INFO)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["chat_history"] = [{"role": "system", "content": SYSTEM_PROMPT}]
    await update.message.reply_text(RULES_TEXT)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø–æ–¥—Ä—É–≥–∞ üíã –ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å...")

async def rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(RULES_TEXT)

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["chat_history"] = [{"role": "system", "content": SYSTEM_PROMPT}]
    await update.message.reply_text("üß† –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞. –ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ...")

async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üíµ 1 –¥–µ–Ω—å ‚Äî $5", callback_data="subscribe_daily")],
        [InlineKeyboardButton("üíµ 7 –¥–Ω–µ–π ‚Äî $12", callback_data="subscribe_weekly")],
        [InlineKeyboardButton("üíµ 30 –¥–Ω–µ–π ‚Äî $30", callback_data="subscribe_monthly")],
        [InlineKeyboardButton("üíµ 365 –¥–Ω–µ–π ‚Äî $50", callback_data="subscribe_yearly")],
    ]
    await update.message.reply_text("üëâ –í—ã–±–µ—Ä–∏ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∏–∂–µ:", reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_subscription_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    plan_map = {
        "subscribe_daily": "daily",
        "subscribe_weekly": "weekly",
        "subscribe_monthly": "monthly",
        "subscribe_yearly": "yearly",
    }
    plan_key = plan_map.get(query.data)
    plan = PLANS[plan_key]

    invoice_url = await create_invoice(query.from_user.id, plan["price"], plan_key)
    keyboard = [[InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", url=invoice_url)]]

    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text="üí∞ –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    user_id = update.effective_user.id

    async with AsyncSessionLocal() as session:
        user = await session.get(User, user_id)
        now = datetime.now(timezone.utc).replace(tzinfo=None)

        if not user:
            user = User(id=user_id, messages_today=0, last_message_date=now)
            session.add(user)
            await session.commit()
        elif user.last_message_date.date() < now.date():
            user.messages_today = 0
            user.last_message_date = now
            await session.commit()

        has_active_subscription = user.subscription_until and user.subscription_until > now

        if not has_active_subscription and user.messages_today >= 10:
            await subscribe(update, context)
            return

        user.messages_today += 1
        user.last_message_date = now
        await session.commit()

    if "chat_history" not in context.user_data:
        context.user_data["chat_history"] = [{"role": "system", "content": SYSTEM_PROMPT}]

    context.user_data["chat_history"].append({"role": "user", "content": user_input})
    history = context.user_data["chat_history"][-100:]

    reply = await get_model_response(history)
    context.user_data["chat_history"].append({"role": "assistant", "content": reply})
    await update.message.reply_text(reply)

async def create_bot():
    bot_app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    bot_app.add_handler(CommandHandler("start", start))
    bot_app.add_handler(CommandHandler("rules", rules))
    bot_app.add_handler(CommandHandler("reset", reset))
    bot_app.add_handler(CommandHandler("subscribe", subscribe))
    bot_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    bot_app.add_handler(CallbackQueryHandler(handle_subscription_button))

    await bot_app.bot.set_my_commands([
        BotCommand("start", "–ù–∞—á–∞—Ç—å"),
        BotCommand("rules", "–ü—Ä–∞–≤–∏–ª–∞"),
        BotCommand("reset", "–°–±—Ä–æ—Å"),
        BotCommand("subscribe", "–ü–æ–¥–ø–∏—Å–∫–∞"),
    ])

    return bot_app

# ======================== FASTAPI ========================
app = FastAPI()
bot_app = None


@app.get("/")
async def root():
    return {"message": "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! üî•"}

@app.post("/webhook")
async def payment_webhook(request: Request):
    data = await request.json()

    if data.get("payment_status") == "finished":
        user_id = int(data.get("order_id"))
        plan_title = data.get("order_description", "").split()[-1]
        days = {
            "daily": 1,
            "weekly": 7,
            "monthly": 30,
            "yearly": 365
        }.get(plan_title, 0)

        async with AsyncSessionLocal() as session:
            user = await session.get(User, user_id)
            if not user:
                user = User(id=user_id)

            user.subscription_until = datetime.utcnow() + timedelta(days=days)
            session.add(user)
            await session.commit()

    return {"status": "ok"}

@asynccontextmanager
async def lifespan(app: FastAPI):
    global bot_app

    await init_db()
    bot_app = await create_bot()

    await bot_app.initialize()
    await bot_app.start()
    await bot_app.updater.start_polling()

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

    yield  # <-- —Ç—É—Ç FastAPI –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å

    if bot_app:
        await bot_app.updater.stop()
        await bot_app.stop()
        await bot_app.shutdown()
        print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

# –ü—Ä–∏–º–µ–Ω—è–µ–º lifespan –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ FastAPI
app = FastAPI(lifespan=lifespan)




