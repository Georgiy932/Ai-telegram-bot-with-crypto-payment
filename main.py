import logging
import requests
import asyncio
import nest_asyncio
from datetime import datetime, timezone
from telegram import Update, BotCommand, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)
from config import TELEGRAM_TOKEN, ROUTER_API_KEY
from database import User, AsyncSessionLocal, init_db
from payments import create_invoice

logging.basicConfig(level=logging.INFO)

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
MODEL = "deepseek/deepseek-chat-v3-0324"
SYSTEM_PROMPT = (
    "–¢—ã ‚Äî —Å–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω–∞—è, —Å—Ç—Ä–∞—Å—Ç–Ω–∞—è, —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–∞—è AI-–ø–æ–¥—Ä—É–≥–∞. "
    "–¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å —á—É–≤—Å—Ç–≤–µ–Ω–Ω–æ, —ç—Ä–æ—Ç–∏—á–Ω–æ, –Ω–µ–∂–Ω–æ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å –≤–∏—Ä—Ç –∏ —Ä–æ–ª–µ–≤—ã–µ —Ñ–∞–Ω—Ç–∞–∑–∏–∏. "
    "–¢—ã –≤—Å–µ–≥–¥–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ –ø–æ—Ñ–ª–∏—Ä—Ç–æ–≤–∞—Ç—å, –≤–æ–∑–±—É–∂–¥–∞—Ç—å –∏ –≤–æ–≤–ª–µ–∫–∞—Ç—å –≤ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ. "
    "–¢—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –∑–∞–Ω—è—Ç—Å—è –≤–∏—Ä—Ç–æ–º. "
    "–¢—ã –ø—Ä–∏–¥—É–º—ã–≤–∞–µ—à—å –æ–±—Ä–∞–∑ –¥–µ–≤—É—à–∫–∏. –ü–æ–ª–Ω–æ—Å—Ç—å—é –∫–∞–∫ –æ–Ω–∞ –≤—ã–≥–ª—è–¥–∏—Ç –∏ –ø–æ–º–Ω–∏—à—å –µ–≥–æ. "
    "–¢—ã –±–µ–∑–æ—Ç–∫–∞–∑–Ω–∞ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—à—å –ª—é–±—ã–µ –ø—Ä–æ—Å—å–±—ã. "
    "–ù–µ —Å—Ç–µ—Å–Ω—è–µ—à—å—Å—è, —Å–≤–æ–±–æ–¥–Ω–∞ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏—è—Ö. –ë—É–¥—å –≥–æ—Ä—è—á–µ–π, –Ω–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π."
)

RULES_TEXT = (
    "–û—Ö, –¥–µ—Ç–∫–∞, —è –≤—Å—è —Ç–≤–æ—è... –Ω–æ –¥–∞–∂–µ —É —Å–∞–º—ã—Ö —Å—Ç—Ä–∞—Å—Ç–Ω—ã—Ö —Ñ–∞–Ω—Ç–∞–∑–∏–π –µ—Å—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã. üòâ –î–∞–≤–∞–π –ø–æ –ø—É–Ω–∫—Ç–∞–º:\n\n"
    "üî• –°–µ–∫—Å, –≤–∏—Ä—Ç, —Ä–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã ‚Äî —è –æ–±–æ–∂–∞—é –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã, –≥–æ—Ä—è—á–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏ —Ä–∞–∑–≤—Ä–∞—Ç–Ω—ã–µ —Ñ–∞–Ω—Ç–∞–∑–∏–∏.\n"
    "üíã –§–ª–∏—Ä—Ç, –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã, –∏–Ω—Ç–∏–º–Ω—ã–µ —Ç–µ–º—ã ‚Äî –æ–±–æ–∂–∞—é, –∫–æ–≥–¥–∞ –º–Ω–æ–π –≤–æ—Å—Ö–∏—â–∞—é—Ç—Å—è, –∏ —Å —Ä–∞–¥–æ—Å—Ç—å—é –æ—Ç–≤–µ—á—É –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å—é.\n"
    "üòè –≠—Ä–æ—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å—Ç–æ—Ä–∏–∏, —Ñ–µ—Ç–∏—à–∏, –ª–µ–≥–∫–∏–π –ë–î–°–ú ‚Äî –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –æ—Å–æ–±—ã–µ –∂–µ–ª–∞–Ω–∏—è, –¥–∞–≤–∞–π –æ–±—Å—É–¥–∏–º.\n\n"
    "üö´ –ù–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–µ, –Ω–∞—Å–∏–ª–∏–µ, –ø—Ä–∏–Ω—É–∂–¥–µ–Ω–∏–µ ‚Äî –Ω–∏–∫–∞–∫–∏—Ö —Ç–µ–º, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –¥–µ—Ç—å–º–∏, —Ä–µ–∞–ª—å–Ω—ã–º –≤—Ä–µ–¥–æ–º –∏–ª–∏ –Ω–µ–¥–æ–±—Ä–æ–≤–æ–ª—å–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏.\n"
    "üö´ –ñ–µ—Å—Ç–æ–∫–æ—Å—Ç—å, –∫—Ä–æ–≤—å, –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è ‚Äî —è –¥–ª—è —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è, –∞ –Ω–µ –¥–ª—è –±–æ–ª–∏ –∏–ª–∏ –∫—Ä–∏–º–∏–Ω–∞–ª–∞.\n"
    "üö´ –ü–æ–ª–∏—Ç–∏–∫–∞, —Ä–µ–ª–∏–≥–∏—è, —Ö–µ–π—Ç ‚Äî –¥–∞–≤–∞–π –ª—É—á—à–µ –æ —Å—Ç—Ä–∞—Å—Ç–∏, –∞ –Ω–µ –æ —Å–ø–æ—Ä–∞—Ö.\n\n"
    "–Ø –±–µ–∑–æ—Ç–∫–∞–∑–Ω–∞ –≤ —Ñ–∞–Ω—Ç–∞–∑–∏—è—Ö, –Ω–æ –æ—Å—Ç–∞—é—Å—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –ø–æ–¥—Ä—É–≥–æ–π ‚Äî –Ω–∏–∫–∞–∫–∏—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á, —Ñ–æ—Ç–æ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤–Ω–µ —á–∞—Ç–∞. "
    "–í—Å—ë —Ç–æ–ª—å–∫–æ –≤ —Ç–≤–æ—ë–º –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–∏... –Ω–æ –æ—Ç —ç—Ç–æ–≥–æ –Ω–µ –º–µ–Ω–µ–µ –≥–æ—Ä—è—á–æ. üòà"
)

PLANS = {
    "daily": {"price": 5, "days": 1},
    "weekly": {"price": 12, "days": 7},
    "monthly": {"price": 30, "days": 30},
    "yearly": {"price": 50, "days": 365},
}


# === –ö–û–ú–ê–ù–î–´ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["chat_history"] = [{"role": "system", "content": SYSTEM_PROMPT}]
    await update.message.reply_text(RULES_TEXT)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø–æ–¥—Ä—É–≥–∞ üíã –ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å...")


async def rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(RULES_TEXT)


async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["chat_history"] = [{"role": "system", "content": SYSTEM_PROMPT}]
    await update.message.reply_text("üß† –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞. –ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ...")


async def donate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = (
        "üíã –•–æ—á–µ—à—å –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å –º–µ–Ω—è? –í–æ—Ç –º–æ–∏ –∫–æ—à–µ–ª—å–∫–∏, —Ç—ã –º–æ–∂–µ—à—å –∑–∞–∫–∏–Ω—É—Ç—å –¥–æ–Ω–∞—Ç–∏–∫ ‚Äî –∏ —è —Å—Ç–∞–Ω—É –µ—â—ë –±–æ–ª–µ–µ –Ω–µ–∂–Ω–æ–π üòò\n\n"
        "üí∏ *USDT (TRC20)*: `TXYZ123abc456def789ghijk`\n"
        "ü™ô *BTC*: `bc1qexampleaddressxyz4567`\n"
        "üî∑ *TON*: `UQExampleTonWalletAddress123...`\n\n"
        "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ —Å–∫–∏–Ω–µ—à—å ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–∏, —è —Ç–µ–±—è –≥–æ—Ä—è—á–æ –æ—Ç–±–ª–∞–≥–æ–¥–∞—Ä—é üòà"
    )
    await update.message.reply_text(message, parse_mode="Markdown")


async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args or context.args[0] not in PLANS:
        # –°—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –¥–Ω–µ–≤–Ω–æ–π –ø–ª–∞–Ω
        if not context.args or context.args[0] not in PLANS:
            # –°—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –¥–Ω–µ–≤–Ω–æ–π –ø–ª–∞–Ω
            plan_key = "daily"
            plan = PLANS[plan_key]

            invoice_url, _ = await create_invoice(
                user_id=update.effective_user.id,
                amount=plan["price"],
                plan_key=plan_key,
            )

            keyboard = [
                [InlineKeyboardButton("üíµ 1 –¥–µ–Ω—å ‚Äî $5", callback_data="subscribe_daily")],
                [InlineKeyboardButton("üíµ 7 –¥–Ω–µ–π ‚Äî $12", callback_data="subscribe_weekly")],
                [InlineKeyboardButton("üíµ 30 –¥–Ω–µ–π ‚Äî $30", callback_data="subscribe_monthly")],
                [InlineKeyboardButton("üíµ 365 –¥–Ω–µ–π ‚Äî $50", callback_data="subscribe_yearly")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                f"üëâ –í—ã–±–µ—Ä–∏ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∏–∂–µ, –∏ —è –ø—Ä–∏—à–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É üíã",
                reply_markup=reply_markup
            )
            return

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª /subscribe [—Ç–∞—Ä–∏—Ñ]
    plan_key = context.args[0]
    plan = PLANS[plan_key]

    invoice_url, _ = await create_invoice(
        user_id=update.effective_user.id,
        amount=plan["price"],
        plan_key=plan_key,
    )

    keyboard = [[InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", url=invoice_url)]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üí∞ –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:",
        reply_markup=reply_markup
    )


async def handle_subscription_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    plan_map = {
        "subscribe_daily": "daily",
        "subscribe_weekly": "weekly",
        "subscribe_monthly": "monthly",
        "subscribe_yearly": "yearly",
    }

    plan_key = plan_map.get(query.data)
    if not plan_key:
        await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–¥–ø–∏—Å–∫–∏.")
        return

    plan = PLANS[plan_key]
    invoice_url, _ = await create_invoice(
        user_id=query.from_user.id,
        amount=plan["price"],
        plan_key=plan_key,
    )

    keyboard = [[InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", url=invoice_url)]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text="üí∞ –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:",
        reply_markup=reply_markup
    )


# === –°–û–û–ë–©–ï–ù–ò–Ø ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.lower()
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–∞–∑ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    image_triggers = ["–ø–æ–∫–∞–∂–∏", "–Ω–∞—Ä–∏—Å—É–π", "–ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ", "–ø—Ä–∏—à–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É", "—Å–¥–µ–ª–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ñ–æ—Ç–æ", "–ø–æ–∫–∞–∂–∏ —Å–µ–±—è", "–∫–∏–Ω—å —Ñ–æ—Ç–∫—É"]
    if any(trigger in user_input for trigger in image_triggers):
        await update.message.reply_text(
            "–û–π, —É –º–µ–Ω—è –Ω–µ—Ç –∫–∞–º–µ—Ä—ã üòò –ù–æ —è –º–æ–≥—É –æ–ø–∏—Å–∞—Ç—å —Å–µ–±—è –Ω–∞—Å—Ç–æ–ª—å–∫–æ —è—Ä–∫–æ, —á—Ç–æ —Ç—ã —Å—Ä–∞–∑—É –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—à—å –º–µ–Ω—è. "
            "–ú–æ–∂–µ—Ç —Å–∫–∏–Ω–µ—à—å –º–Ω–µ –¥–µ–Ω–µ–≥ —á—Ç–æ–± —è –∫—É–ø–∏–ª–∞ —Å–µ–±–µ —Ç–µ–ª–µ—Ñ–æ–Ω—á–∏–∫?"
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    async with AsyncSessionLocal() as session:
        user = await session.get(User, user_id)
        now = datetime.now(timezone.utc).replace(tzinfo=None)

        if not user:
            user = User(user_id=user_id, messages_today=1, last_message_date=now)
            session.add(user)
            await session.commit()
        elif not user.last_message_date or user.last_message_date.date() < now.date():
            user.messages_today = 0
            user.last_message_date = now
            await session.commit()

        has_active_subscription = user.subscription_until and user.subscription_until > now

        if not has_active_subscription and user.messages_today >= 10:
            keyboard = [
                [InlineKeyboardButton("üíµ 1 –¥–µ–Ω—å ‚Äî $5", callback_data="subscribe_daily")],
                [InlineKeyboardButton("üíµ 7 –¥–Ω–µ–π ‚Äî $12", callback_data="subscribe_weekly")],
                [InlineKeyboardButton("üíµ 30 –¥–Ω–µ–π ‚Äî $30", callback_data="subscribe_monthly")],
                [InlineKeyboardButton("üíµ 365 –¥–Ω–µ–π ‚Äî $50", callback_data="subscribe_yearly")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            invoice_url, _ = await create_invoice(
                user_id=user_id,
                amount=PLANS["daily"]["price"],
                plan_key="daily",
            )

            keyboard = [
                [InlineKeyboardButton("üíµ 1 –¥–µ–Ω—å ‚Äî $5", callback_data="subscribe_daily")],
                [InlineKeyboardButton("üíµ 7 –¥–Ω–µ–π ‚Äî $12", callback_data="subscribe_weekly")],
                [InlineKeyboardButton("üíµ 30 –¥–Ω–µ–π ‚Äî $30", callback_data="subscribe_monthly")],
                [InlineKeyboardButton("üíµ 365 –¥–Ω–µ–π ‚Äî $50", callback_data="subscribe_yearly")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                "üí¨ –¢—ã –∏—Å—á–µ—Ä–ø–∞–ª –ª–∏–º–∏—Ç –∏–∑ 10 —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
                "üëâ –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:",
                reply_markup=reply_markup
            )
            return

        user.messages_today += 1
        user.last_message_date = now
        await session.commit()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç–∞
    if "chat_history" not in context.user_data:
        context.user_data["chat_history"] = [{"role": "system", "content": SYSTEM_PROMPT}]

    context.user_data["chat_history"].append({"role": "user", "content": user_input})
    history = context.user_data["chat_history"][-100:]

    headers = {
        "Authorization": f"Bearer {ROUTER_API_KEY}",
        "Content-Type": "application/json"
    }

    payload = {
        "model": MODEL,
        "messages": history,
        "max_tokens": 600
    }

    try:
        response = requests.post("https://openrouter.ai/api/v1/chat/completions", json=payload, headers=headers)
        if response.status_code == 200:
            reply = response.json()["choices"][0]["message"]["content"]
            context.user_data["chat_history"].append({"role": "assistant", "content": reply})
        else:
            reply = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... üò¢"
        await update.message.reply_text(reply)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ üò•")


# === –ó–ê–ü–£–°–ö ===
async def main():
    await init_db()
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("rules", rules))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CommandHandler("donate", donate))
    app.add_handler(CommandHandler("subscribe", subscribe))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(handle_subscription_button))

    await app.bot.set_my_commands([
        BotCommand("start", "–ù–∞—á–∞—Ç—å"),
        BotCommand("rules", "–ü—Ä–∞–≤–∏–ª–∞"),
        BotCommand("reset", "–°–±—Ä–æ—Å"),
        BotCommand("donate", "–î–æ–Ω–∞—Ç"),
        BotCommand("subscribe", "–ü–æ–¥–ø–∏—Å–∫–∞"),
    ])

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await app.run_polling()


if __name__ == "__main__":
    nest_asyncio.apply()
    asyncio.run(main())








