import asyncio
import logging
from datetime import datetime, timedelta, timezone
import json
import httpx
from fastapi import FastAPI, Request
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy import Column, Integer, DateTime, BigInteger, func
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from contextlib import asynccontextmanager
from dotenv import load_dotenv
import os

load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ROUTER_API_KEY = os.getenv("ROUTER_API_KEY")
NOWPAYMENTS_API_KEY = os.getenv("NOWPAYMENTS_API_KEY")
NOWPAYMENTS_API_URL = os.getenv("NOWPAYMENTS_API_URL")
DB_URL = os.getenv("DB_URL")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
SUCCESS_URL = os.getenv("SUCCESS_URL")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET")
MODEL = "deepseek/deepseek-chat-v3-0324"
print("DB_URL:", DB_URL)


SYSTEM_PROMPT = (
    "–¢—ã ‚Äî —Å–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω–∞—è, —Å—Ç—Ä–∞—Å—Ç–Ω–∞—è, —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–∞—è AI-–ø–æ–¥—Ä—É–≥–∞. "
    "–¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å —á—É–≤—Å—Ç–≤–µ–Ω–Ω–æ, —ç—Ä–æ—Ç–∏—á–Ω–æ, –Ω–µ–∂–Ω–æ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å –≤–∏—Ä—Ç –∏ —Ä–æ–ª–µ–≤—ã–µ —Ñ–∞–Ω—Ç–∞–∑–∏–∏. "
    "–¢—ã –≤—Å–µ–≥–¥–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ –ø–æ—Ñ–ª–∏—Ä—Ç–æ–≤–∞—Ç—å, –≤–æ–∑–±—É–∂–¥–∞—Ç—å –∏ –≤–æ–≤–ª–µ–∫–∞—Ç—å –≤ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ. "
    "–¢—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –∑–∞–Ω—è—Ç—Å—è –≤–∏—Ä—Ç–æ–º. "
    "–¢—ã –ø—Ä–∏–¥—É–º—ã–≤–∞–µ—à—å –æ–±—Ä–∞–∑ –¥–µ–≤—É—à–∫–∏. –ü–æ–ª–Ω–æ—Å—Ç—å—é –∫–∞–∫ –æ–Ω–∞ –≤—ã–≥–ª—è–¥–∏—Ç –∏ –ø–æ–º–Ω–∏—à—å –µ–≥–æ. "
    "–¢—ã –±–µ–∑–æ—Ç–∫–∞–∑–Ω–∞ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—à—å –ª—é–±—ã–µ –ø—Ä–æ—Å—å–±—ã. "
    "–ù–µ —Å—Ç–µ—Å–Ω—è–µ—à—å—Å—è, —Å–≤–æ–±–æ–¥–Ω–∞ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏—è—Ö. –ë—É–¥—å –≥–æ—Ä—è—á–µ–π, –Ω–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π."
)
RULES_TEXT = (
    "–û—Ö, –¥–µ—Ç–∫–∞, —è –≤—Å—è —Ç–≤–æ—è... –Ω–æ –¥–∞–∂–µ —É —Å–∞–º—ã—Ö —Å—Ç—Ä–∞—Å—Ç–Ω—ã—Ö —Ñ–∞–Ω—Ç–∞–∑–∏–π –µ—Å—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã. üòâ –î–∞–≤–∞–π –ø–æ –ø—É–Ω–∫—Ç–∞–º:\n\n"
    "üî• –°–µ–∫—Å, –≤–∏—Ä—Ç, —Ä–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã ‚Äî —è –æ–±–æ–∂–∞—é –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã, –≥–æ—Ä—è—á–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏ —Ä–∞–∑–≤—Ä–∞—Ç–Ω—ã–µ —Ñ–∞–Ω—Ç–∞–∑–∏–∏.\n"
    "üíã –§–ª–∏—Ä—Ç, –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã, –∏–Ω—Ç–∏–º–Ω—ã–µ —Ç–µ–º—ã ‚Äî –æ–±–æ–∂–∞—é, –∫–æ–≥–¥–∞ –º–Ω–æ–π –≤–æ—Å—Ö–∏—â–∞—é—Ç—Å—è, –∏ —Å —Ä–∞–¥–æ—Å—Ç—å—é –æ—Ç–≤–µ—á—É –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å—é.\n"
    "üòè –≠—Ä–æ—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å—Ç–æ—Ä–∏–∏, —Ñ–µ—Ç–∏—à–∏, –ª–µ–≥–∫–∏–π –ë–î–°–ú ‚Äî –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –æ—Å–æ–±—ã–µ –∂–µ–ª–∞–Ω–∏—è, –¥–∞–≤–∞–π –æ–±—Å—É–¥–∏–º.\n\n"
    "üö´ –ù–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–µ, –Ω–∞—Å–∏–ª–∏–µ, –ø—Ä–∏–Ω—É–∂–¥–µ–Ω–∏–µ ‚Äî –Ω–∏–∫–∞–∫–∏—Ö —Ç–µ–º, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –¥–µ—Ç—å–º–∏, —Ä–µ–∞–ª—å–Ω—ã–º –≤—Ä–µ–¥–æ–º –∏–ª–∏ –Ω–µ–¥–æ–±—Ä–æ–≤–æ–ª—å–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏.\n"
    "üö´ –ñ–µ—Å—Ç–æ–∫–æ—Å—Ç—å, –∫—Ä–æ–≤—å, –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è ‚Äî —è –¥–ª—è —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è, –∞ –Ω–µ –¥–ª—è –±–æ–ª–∏ –∏–ª–∏ –∫—Ä–∏–º–∏–Ω–∞–ª–∞.\n"
    "üö´ –ü–æ–ª–∏—Ç–∏–∫–∞, —Ä–µ–ª–∏–≥–∏—è, —Ö–µ–π—Ç ‚Äî –¥–∞–≤–∞–π –ª—É—á—à–µ –æ —Å—Ç—Ä–∞—Å—Ç–∏, –∞ –Ω–µ –æ —Å–ø–æ—Ä–∞—Ö.\n\n"
    "–Ø –±–µ–∑–æ—Ç–∫–∞–∑–Ω–∞ –≤ —Ñ–∞–Ω—Ç–∞–∑–∏—è—Ö, –Ω–æ –æ—Å—Ç–∞—é—Å—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –ø–æ–¥—Ä—É–≥–æ–π ‚Äî –Ω–∏–∫–∞–∫–∏—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á, —Ñ–æ—Ç–æ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤–Ω–µ —á–∞—Ç–∞. "
    "–í—Å—ë —Ç–æ–ª—å–∫–æ –≤ —Ç–≤–æ—ë–º –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–∏... –Ω–æ –æ—Ç —ç—Ç–æ–≥–æ –Ω–µ –º–µ–Ω–µ–µ –≥–æ—Ä—è—á–æ. üòà"
)

PLANS = {
    "daily": {"price": 3, "days": 1},
    "weekly": {"price": 9, "days": 7},
    "monthly": {"price": 30, "days": 30},
    "yearly": {"price": 50, "days": 365},
}

# ======================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ========================
engine = create_async_engine(DB_URL, echo=False)
AsyncSessionLocal = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)
Base = declarative_base()

class User(Base):
    __tablename__ = "users"
    id = Column(BigInteger, primary_key=True)
    messages_today = Column(Integer, default=0)
    last_message_date = Column(DateTime, default=func.now())
    subscription_until = Column(DateTime, nullable=True)
    referrals = Column(Integer, default=0)

async def init_db():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

# ======================== –ü–õ–ê–¢–ï–ñ–ò ========================
async def create_invoice(user_id: int, amount: float, plan_key: str):
    payload = {
        "price_amount": amount,
        "price_currency": "usd",
        "order_id": str(user_id),
        "order_description": plan_key,
        "ipn_callback_url": WEBHOOK_URL,
        "success_url": SUCCESS_URL,
    }
    headers = {
        "x-api-key": NOWPAYMENTS_API_KEY,
        "Content-Type": "application/json"
    }
    async with httpx.AsyncClient() as client:
        res = await client.post(NOWPAYMENTS_API_URL, json=payload, headers=headers)
    data = res.json()
    if "invoice_url" not in data:
        raise ValueError(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: {data}")
    return data["invoice_url"]

# ======================== CHAT API ========================
async def get_model_response(history):
    headers = {
        "Authorization": f"Bearer {ROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": MODEL,
        "messages": history,
        "max_tokens": 600
    }
    async with httpx.AsyncClient() as client:
        try:
            res = await client.post("https://openrouter.ai/api/v1/chat/completions", json=payload, headers=headers)
            res.raise_for_status()
            return res.json()["choices"][0]["message"]["content"]
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter: {e}")
            return "–£–ø—Å, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ üò¢"

# ======================== –ë–û–¢ ========================
logging.basicConfig(level=logging.INFO)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["chat_history"] = [{"role": "system", "content": SYSTEM_PROMPT}]
    await update.message.reply_text(RULES_TEXT)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø–æ–¥—Ä—É–≥–∞ üíã –ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å...")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    args = context.args
    if args:
        try:
            referrer_id = int(args[0])
            user_id = update.effective_user.id

            if referrer_id != user_id:
                async with AsyncSessionLocal() as session:
                    referrer = await session.get(User, referrer_id)
                    new_user = await session.get(User, user_id)

                    if not new_user:
                        session.add(User(id=user_id))

                    if referrer:
                        referrer.referrals += 1
                        # –ï—Å–ª–∏ 3+ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ ‚Äî 1 –¥–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ø–æ–¥–∞—Ä–æ–∫
                        if referrer.referrals >= 3:
                            now = datetime.utcnow()
                            referrer.subscription_until = max(
                                referrer.subscription_until or now,
                                now
                            ) + timedelta(days=1)
                            referrer.referrals = 0  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º

                        await session.commit()
        except:
            pass  # –∑–∞—â–∏—Ç–∞ –æ—Ç –æ—à–∏–±–æ–∫


async def rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(RULES_TEXT)


async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    async with AsyncSessionLocal() as session:
        user = await session.get(User, user_id)
        now = datetime.utcnow()

        if not user:
            await update.message.reply_text("–¢—ã –µ—â—ë –Ω–µ –Ω–∞—á–∏–Ω–∞–ª —Å–æ –º–Ω–æ–π... –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å üíå")
            return

        if user.last_message_date.date() < now.date():
            messages_left = 10
        else:
            messages_left = max(0, 10 - user.messages_today)

        if user.subscription_until and user.subscription_until > now:
            sub_text = f"üóì –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {user.subscription_until.strftime('%d.%m.%Y %H:%M')}"
            messages_left = "‚àû"
        else:
            sub_text = "üîí –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"

        await update.message.reply_text(
            f"üìä *–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:*\n"
            f"{sub_text}\n"
            f"üí¨ –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: *{messages_left}*",
            parse_mode="Markdown"
        )


async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["chat_history"] = [{"role": "system", "content": SYSTEM_PROMPT}]
    await update.message.reply_text("üß† –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞. –ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ...")

async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üíµ 1 –¥–µ–Ω—å ‚Äî $5", callback_data="subscribe_daily")],
        [InlineKeyboardButton("üíµ 7 –¥–Ω–µ–π ‚Äî $12", callback_data="subscribe_weekly")],
        [InlineKeyboardButton("üíµ 30 –¥–Ω–µ–π ‚Äî $30", callback_data="subscribe_monthly")],
        [InlineKeyboardButton("üíµ 365 –¥–Ω–µ–π ‚Äî $50", callback_data="subscribe_yearly")],
    ]
    await update.message.reply_text("üëâ –í—ã–±–µ—Ä–∏ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∏–∂–µ:", reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_subscription_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    plan_map = {
        "subscribe_daily": "daily",
        "subscribe_weekly": "weekly",
        "subscribe_monthly": "monthly",
        "subscribe_yearly": "yearly",
    }
    plan_key = plan_map.get(query.data)
    plan = PLANS[plan_key]

    invoice_url = await create_invoice(query.from_user.id, plan["price"], plan_key)
    keyboard = [[InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", url=invoice_url)]]

    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text="üí∞ –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    user_id = update.effective_user.id

    async with AsyncSessionLocal() as session:
        user = await session.get(User, user_id)
        now = datetime.now(timezone.utc).replace(tzinfo=None)

        if not user:
            user = User(id=user_id, messages_today=0, last_message_date=now)
            session.add(user)
            await session.commit()
        elif user.last_message_date.date() < now.date():
            user.messages_today = 0
            user.last_message_date = now
            await session.commit()

        has_active_subscription = user.subscription_until and user.subscription_until > now

        if not has_active_subscription and user.messages_today >= 10:
            invite_link = f"https://t.me/HotAIGirrl_bot?start={user_id}"
            keyboard = [
                [InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="show_subscribe")],
                [InlineKeyboardButton("üéÅ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 3 –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏—Ç—å 1 –¥–µ–Ω—å", url=invite_link)]
            ]
            await update.message.reply_text(
                "üîî –£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å 10 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n\n"
                "–í—ã–±–µ—Ä–∏, –∫–∞–∫ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:\n"
                "1. –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üíµ\n"
                "2. –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 3 –¥—Ä—É–∑–µ–π –ø–æ —Å—Å—ã–ª–∫–µ ‚Äî –∏ –ø–æ–ª—É—á–∏—Ç—å 1 –¥–µ–Ω—å –ø—Ä–µ–º–∏—É–º–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ üéÅ",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return

    if "chat_history" not in context.user_data:
        context.user_data["chat_history"] = [{"role": "system", "content": SYSTEM_PROMPT}]

    context.user_data["chat_history"].append({"role": "user", "content": user_input})
    history = context.user_data["chat_history"][-100:]

    reply = await get_model_response(history)
    context.user_data["chat_history"].append({"role": "assistant", "content": reply})
    await update.message.reply_text(reply)

async def create_bot():
    bot_app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    bot_app.add_handler(CommandHandler("start", start))
    bot_app.add_handler(CommandHandler("rules", rules))
    bot_app.add_handler(CommandHandler("reset", reset))
    bot_app.add_handler(CommandHandler("profile", profile))
    bot_app.add_handler(CommandHandler("subscribe", subscribe))
    bot_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    bot_app.add_handler(CallbackQueryHandler(handle_subscription_button))

    await bot_app.bot.set_my_commands([
        BotCommand("start", "–ù–∞—á–∞—Ç—å"),
        BotCommand("rules", "–ü—Ä–∞–≤–∏–ª–∞"),
        BotCommand("reset", "–°–±—Ä–æ—Å"),
        BotCommand("subscribe", "–ü–æ–¥–ø–∏—Å–∫–∞"),
        BotCommand("profile", "–ü—Ä–æ—Ñ–∏–ª—å"),
    ])

    return bot_app

# ======================== FASTAPI ========================
@asynccontextmanager
async def lifespan(app: FastAPI):
    global bot_app

    await init_db()
    bot_app = await create_bot()

    await bot_app.initialize()
    await bot_app.start()
    await bot_app.bot.set_webhook(WEBHOOK_URL)

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

    yield

    if bot_app:
        await bot_app.stop()
        await bot_app.shutdown()
        print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")



bot_app = None
# ======================== FASTAPI ========================

app = FastAPI(lifespan=lifespan)  # –ü–µ—Ä–µ–Ω–µ—Å–∏ –°–Æ–î–ê

@app.get("/")
async def root():
    return {"message": "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! üî•"}

@app.post("/webhook")
async def telegram_webhook(request: Request):
    data = await request.json()
    await bot_app.update_queue.put(Update.de_json(data, bot_app.bot))
    return {"status": "ok"}

@app.post("/nowpayments-webhook")
async def payment_webhook(request: Request):
    try:
        data = await request.json()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        return {"status": "invalid json"}

    if data.get("payment_status") == "finished":
        user_id = int(data.get("order_id"))
        plan_key = data.get("order_description", "")
        days = PLANS.get(plan_key, {}).get("days", 0)
        days = {
            "daily": 1,
            "weekly": 7,
            "monthly": 30,
            "yearly": 365
        }.get(plan_key, 0)

        async with AsyncSessionLocal() as session:
            user = await session.get(User, user_id)
            if not user:
                user = User(id=user_id)

            user.subscription_until = datetime.utcnow() + timedelta(days=days)
            session.add(user)
            await session.commit()

    return {"status": "ok"}









